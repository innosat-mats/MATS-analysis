% Intensities Re-run
close all; clear all;
retrieve = 0;
just_update = 1;
test_keograms=0;
remove_background = 0;
month_chosen = 'March';
hemisphere = 'N';
colors= [0.9 0.2 0.8; 0.5 0.9 0.2; 0.2 0.2 0.2];

%Get times of all auroral events
switch month_chosen
    case 'February'
        addpath("C:\Nobackup\juditpcj\MATS\Monthdata\Februarymonth\")
        load("febpeaksNH.mat");
        load("febpeaksSH.mat") ;
        full_tlist = [febpeaksNH.time,febpeaksSH.time];
        switch hemisphere
            case 'N'
                tevent_list = febpeaksNH.time;
                row_list = febpeaksNH.row;
            case 'S'
                tevent_list = febpeaksSH.time;
                row_list = febpeaksSH.row;
        end
    case 'March'
        addpath("C:\Nobackup\juditpcj\MATS\Monthdata\Marchmonth\")
        load("marpeaksNH.mat");
        load("marpeaksSH.mat") ;
        full_tlist = [marpeaksNH.time,marpeaksSH.time];
        switch hemisphere
            case 'N'
                tevent_list = marpeaksNH.time;
                row_list = marpeaksNH.row;
            case 'S'
                tevent_list = marpeaksSH.time;
                row_list = marpeaksSH.row;
        end
    case 'April'
        addpath("C:\Nobackup\juditpcj\MATS\Monthdata\Aprilmonth\")
        load("aprpeaksNH.mat");
        load("aprpeaksSH.mat");
        full_tlist = [aprpeaksNH.time,aprpeaksSH.time];
        switch hemisphere
            case 'N'
                tevent_list = aprpeaksNH.time;
                row_list = aprpeaksNH.row;
            case 'S'
                tevent_list = aprpeaksSH.time;
                row_list = aprpeaksSH.row;
        end

end

%% Download images
if retrieve 
    getzarr = 'python \\ug.kth.se\dfs\home\j\u\juditpcj\appdata\xp.V2\Documents\GitHub\MATS-analysis\Judit\Downloadfiles\get_zarr.py';
    changedirpath = append('C:\Nobackup\juditpcj\MATS\Images_J\', month_chosen, '\',hemisphere,'H\');
    cd(changedirpath)
    for i = 1:length(tevent_list)
        disp(tevent_list(i));
        ti = tevent_list(i)-minutes(4);
        te = tevent_list(i)+minutes(4);
        str_ti = append('2023 ',num2str(month(ti)), ' ',num2str(day(ti)), ' ', num2str(hour(ti)), ' ', num2str(minute(ti)), ' ', num2str(second(ti)));
        str_te = append('2023 ',num2str(month(te)), ' ',num2str(day(te)), ' ', num2str(hour(te)), ' ', num2str(minute(te)), ' ', num2str(second(te)));
        
        call_python = append(getzarr,' -c IR1 -b ',str_ti,' -e ', str_te)
        system(call_python);
    end
    cd \\ug.kth.se\dfs\home\j\u\juditpcj\appdata\xp.V2\Documents\GitHub\MATS-analysis\Judit\
end

%% Fix intensity
%This trusts 100% Ceona's finding algorithm, and just finds the row she
%took as peak and removes background for intensity for that row and the one avobe and below.
if just_update
    dirlist = dir(append('C:\Nobackup\juditpcj\MATS\Images_J\', month_chosen, '\',hemisphere,'H\'));
    imcal = 'ImageCalibrated';
    imtime = 'time';
    intensity_array = zeros([length(dirlist),1]);
    for i = 1:2%length(dirlist)-2
        namefile = dirlist(i+2).name
        source = append('C:\Nobackup\juditpcj\MATS\Images_J\',month_chosen,'\',hemisphere,'H\',namefile);
        vardata = ncread(source,imcal);
        vartime = ncread(source,imtime);
        times = vartime*10^(-9);
        time = datetime(2000,01,01,00,00,00) + seconds(times);
        ind_event = find(tevent_list> time(1) & tevent_list< time(end));
        ind_row = row_list(ind_event);
        [val,ind_col] = min(abs(time-tevent_list(ind_event)));
        
        %Figure
        pxi = 30*(i-1); pyi = 110*rem(i,10); pxf = 1000; pyf = 500;
        figure(Position= [pxi pyi pxf pyf]);
        tiledlayout(2,1)
        nexttile; hold on;

        %Generate and plot keogram
        keogram = zeros([length(vardata(1,:,1)),length(vardata(1,1,:))]);
        for j = 1:length(vardata(1,1,:))
            mid_col = vardata(22,:,j)';
            keogram(:,j) = mid_col';
        end
        imagesc(time,1:1:length(mid_col),keogram)
                
        nexttile; hold on; grid;
        % Remove background for the wanted row and the ones before and
        % after
        ic = 1;
        intensity_matrix = zeros([3,3]);
        for rown = ind_row-1:ind_row+1
            row = keogram(rown,:);
            tsecs = seconds(time-time(1));
            [fit1,~,mu] = polyfit(tsecs,row',1);
            line1 = polyval(fit1,tsecs,[],mu);
            %Find max deviation of the background
            clear1 = row-line1';
            imax = find(clear1 == max(clear1(5:end-5)));
    
            %Find where aurora starts and ends to separate the background
            is = find(row(1:imax)'<line1(1:imax),1,'last')-1;
            ie = find(row(imax:end)'<line1(imax:end),1,'first')+imax+1;
            y = [row(1:is) row(ie:end)];
            x = [tsecs(1:is)' tsecs(ie:end)'];
    
            %Fit again without the aurora to find background trend
            [fit2,~,mu] = polyfit(x',y',1);
            avg_woaurora = polyval(fit2,tsecs,[],mu);
            
            %Plot
            scatter(time, row,'*',MarkerEdgeColor=colors(ic,:))
            plot(time,line1','--',color= colors(ic,:))
            plot(time,avg_woaurora', color = colors(ic,:))
            xline(time(is),color = colors(ic,:))
            xline(time(ie),color = colors(ic,:))

            %Row witout background
            row_wob = row-avg_woaurora';

            %Fill intensity matrix
            intensity_matrix(ic,:) = row_wob(ind_col-1:ind_col+1);

            ic = ic+1;            
        end
        pause(0.1)

        %Get new value for intensity taking average of 9 values surrounding
        %pixel
        intensity_new = mean(intensity_matrix,'all');
        %Save in array
        intensity_array(i) = intensity_new;
    end
    %doublecheck it worked and save in structure
    if length(nonzeros(intensity_array)) == length(intensity_array)
        switch month_chosen
            case 'February'
                switch hemisphere
                    case 'N'
                        febpeaksNH.newI = intensity_array;
                        save('\\ug.kth.se\dfs\home\j\u\juditpcj\appdata\xp.V2\Documents\GitHub\MATS-analysis\Judit\Downloadfiles\Structures\febpeaksNH.mat',febpeaksNH)
                    case 'S'
                        febpeaksSH.newI = intensity_array;
                        save('\\ug.kth.se\dfs\home\j\u\juditpcj\appdata\xp.V2\Documents\GitHub\MATS-analysis\Judit\Downloadfiles\Structures\febpeaksSH.mat',febpeaksSH)
                end
            case 'March'
                switch hemisphere
                    case 'N'
                        marpeaksNH.newI = intensity_array;
                        save('\\ug.kth.se\dfs\home\j\u\juditpcj\appdata\xp.V2\Documents\GitHub\MATS-analysis\Judit\Downloadfiles\Structures\marpeaksNH.mat',marpeaksNH)
                    case 'S'
                        marpeaksSH.newI = intensity_array;
                        save('\\ug.kth.se\dfs\home\j\u\juditpcj\appdata\xp.V2\Documents\GitHub\MATS-analysis\Judit\Downloadfiles\Structures\marpeaksSH.mat',marpeaksSH)
                end
            case 'April'
                switch hemisphere
                    case 'N'
                        aprpeaksNH.newI = intensity_array;
                        save('\\ug.kth.se\dfs\home\j\u\juditpcj\appdata\xp.V2\Documents\GitHub\MATS-analysis\Judit\Downloadfiles\Structures\aprpeaksNH.mat',aprpeaksNH)
                    case 'S'
                        aprpeaksSH.newI = intensity_array;
                        save('\\ug.kth.se\dfs\home\j\u\juditpcj\appdata\xp.V2\Documents\GitHub\MATS-analysis\Judit\Downloadfiles\Structures\aprpeaksSH.mat',aprpeaksSH)
                end
        end
        
    else
        disp('Something went wrong! The updated intensities were not saved.')
        
    end
       
end

%% Test keograms  
if test_keograms
dirlist = dir(append('C:\Nobackup\juditpcj\MATS\Images_J\',month_chosen,'\',hemisphere,'H\'));
imcal = 'ImageCalibrated';
imtime = 'time';
for i = 1:length(dirlist)-2
    namefile = dirlist(i+2).name
    source = append('C:\Nobackup\juditpcj\MATS\Images_J\',month_chosen,'\',namefile);
    vardata = ncread(source,imcal);
    vartime = ncread(source,imtime);
    times = vartime*10^(-9);
    time = datetime(2000,01,01,00,00,00) + seconds(times);
    keogram = zeros([length(vardata(1,:,1)),length(vardata(1,1,:))]);
    ind_event = find(tevent_list> time(1) & tevent_list< time(end));
    %ind_col = find(time == tevent_list(ind_event));
    [val,ind_col] = min(abs(time-tevent_list(ind_event)));
    if ~isscalar(ind_event)
        disp('More than one find')
    end
    
    for j = 1:length(vardata(1,1,:))
        %if j == 19
            %figure; imagesc(vardata(:,:,j)')
            %title(datestr(time(j)))
        %end
        mid_col = vardata(22,end:-1:1,j)';
        keogram(:,j) = mid_col';
        %pause(0.1)
    end

    
    pxi = 30*(i-1);
    pyi = 110*rem(i,10);
    pxf = 600;
    pyf = 300;

    figure(Position= [pxi pyi pxf pyf]);
    imagesc(keogram)
    yline(187-row_list(ind_event))
    xline(ind_col)
    title(datestr(tevent_list(ind_event)))
    pause(0.1)
end
end

%Remove background in keogram
if remove_background
dirlist = dir(append('C:\Nobackup\juditpcj\MATS\Images_J\',month_chosen,'\',hemisphere,'H\'));
imcal = 'ImageCalibrated';
imtime = 'time';

rowsplot = [50, 100, 150];

for i = 1:3%length(dirlist)-2
    namefile = dirlist(i+2).name;
    source = append('C:\Nobackup\juditpcj\MATS\Images_J\',month_chosen,'\',namefile);
    vardata = ncread(source,imcal);
    vartime = ncread(source,imtime);
    times = vartime*10^(-9);
    time = datetime(2000,01,01,00,00,00) + seconds(times);

    % Check if there are cuts
    if length(time)<80
        if seconds(time(end)-time(1)) == 474
            indcut = find(seconds(diff(time))>7);
        end
        disp(length(time))
    end
    
    pxi = 30*(i-1); pyi = 110*rem(i,10); pxf = 1000; pyf = 500;
    figure(Position= [pxi pyi pxf pyf]);
    tiledlayout(3,1)
    nexttile; hold on;

    %Generate and plot keogram
    keogram = zeros([length(vardata(1,:,1)),length(vardata(1,1,:))]);
    keogram_wob = keogram;
    for j = 1:length(vardata(1,1,:))
        mid_col = vardata(22,:,j)';
        keogram(:,j) = mid_col';
    end
    imagesc(time,1:1:length(mid_col),keogram)

    % Remove background for each row and plot some rows
    nexttile; hold on;
    ic = 1;
    for rown = 1:length(keogram(:,1))
        row = keogram(rown,:);
        tsecs = seconds(time-time(1));
        [fit1,~,mu] = polyfit(tsecs,row',1);
        line1 = polyval(fit1,tsecs,[],mu);
        %Find max deviation of the background
        clear1 = row-line1';
        imax = find(clear1 == max(clear1(5:end-5)));

        %Find where aurora starts and ends to separate the background
        is = find(row(1:imax)'<line1(1:imax),1,'last')-1;
        ie = find(row(imax:end)'<line1(imax:end),1,'first')+imax+1;
        y = [row(1:is) row(ie:end)];
        x = [tsecs(1:is)' tsecs(ie:end)'];

        %Fit again without the aurora to find background trend
        [fit2,~,mu] = polyfit(x',y',1);
        avg_woaurora = polyval(fit2,tsecs,[],mu);
        %avg_woaurora= mean([row(1:is) row(ie:end)]);
        
        if ismember(rown,rowsplot)
            scatter(time, row,'*',MarkerEdgeColor=colors(ic,:))
            plot(time,line1','--',color= colors(ic,:))
            plot(time,avg_woaurora', color = colors(ic,:))
            xline(time(is),color = colors(ic,:))
            xline(time(ie),color = colors(ic,:))
            ic = ic+1;
        end
    
        %New keogram without background
        keogram_wob(rown,:) = keogram(rown,:)-avg_woaurora';        
    end


    % Find max intensity of each column
    rowmaxi = zeros([length(keogram(1,:)),1]);
    for coln = 1:length(rowmaxi)
        rowmaxi(coln) = find(keogram_wob(:,coln)==max(keogram_wob(:,coln)));
    end

    nexttile; hold on;
    imagesc(time, 1:1:length(mid_col),keogram_wob)
    scatter(time,rowmaxi, '*')
    %xline(ind_col)
    %title(datestr(tevent_list(ind_event)))
    pause(0.1)


end
end


